import { GifsResult } from '@giphy/js-fetch-api';
import { IGif, IUser } from '@giphy/js-types';
import { Component, h, JSX } from 'preact';
import { debounce } from 'throttle-debounce';
import { EventProps } from './gif';
declare type Props = {
    className?: string;
    user: Partial<IUser>;
    gifHeight: number;
    gifWidth?: number;
    gutter: number;
    fetchGifs: (offset: number) => Promise<GifsResult>;
    onGifsFetched?: (gifs: IGif[]) => void;
    noResultsMessage?: string | JSX.Element;
    hideAttribution?: boolean;
    noLink?: boolean;
    tabIndex?: number;
    borderRadius?: number;
} & EventProps;
declare type State = {
    isFetching: boolean;
    numberOfGifs: number;
    gifs: IGif[];
    isLoaderVisible: boolean;
    isDoneFetching: boolean;
};
declare class Carousel extends Component<Props, State> {
    static className: string;
    static readonly defaultProps: Readonly<{
        gutter: number;
        user: {};
    }>;
    readonly state: Readonly<{
        isFetching: boolean;
        numberOfGifs: number;
        gifs: IGif[];
        isLoaderVisible: boolean;
        isDoneFetching: boolean;
    }>;
    el?: HTMLElement;
    paginator: () => Promise<IGif[]>;
    componentDidMount(): void;
    onLoaderVisible: (isVisible: boolean) => void;
    onFetch: debounce<() => Promise<void>>;
    render({ onGifVisible, onGifRightClick, gifHeight, gifWidth, gutter, className, onGifClick, onGifHover, onGifKeyPress, onGifSeen, user, noResultsMessage, hideAttribution, noLink, tabIndex, borderRadius, }: Props, { gifs }: State): h.JSX.Element;
}
export default Carousel;
