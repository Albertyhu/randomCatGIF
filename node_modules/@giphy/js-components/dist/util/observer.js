"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var preact_1 = require("preact");
var Observer = /** @class */ (function (_super) {
    __extends(Observer, _super);
    function Observer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.container = null;
        return _this;
    }
    Observer.prototype.componentDidMount = function () {
        var _this = this;
        this.io = new IntersectionObserver(function (_a) {
            var entry = _a[0];
            _this.setState({ isVisible: entry.isIntersecting });
            var onVisibleChange = _this.props.onVisibleChange;
            if (onVisibleChange)
                onVisibleChange(entry.isIntersecting);
        });
        this.io.observe(this.container);
    };
    Observer.prototype.componentWillUnmount = function () {
        if (this.io) {
            this.io.disconnect();
        }
    };
    Observer.prototype.render = function (_a, _b) {
        var _this = this;
        var children = _a.children, className = _a.className;
        var isVisible = _b.isVisible;
        var kids = Array.isArray(children) ? children : [children];
        return (preact_1.h("div", { ref: function (div) { return (_this.container = div); }, className: className }, kids.map(function (child) { return (child ? preact_1.cloneElement(child, { isVisible: isVisible }) : null); })));
    };
    return Observer;
}(preact_1.Component));
exports.default = Observer;
//# sourceMappingURL=observer.js.map